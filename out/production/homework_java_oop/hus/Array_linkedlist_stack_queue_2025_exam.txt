package hus.oop.midterm_2024_2025_rle_datastructure.datastructure;

public class MyArrayQueue implements MyQueue {
    public static final int MAX_SIZE = Integer.MAX_VALUE - 8;
    private static final int DEFAULT_INITIAL_CAPACITY = 8;
    private int[] elements;
    private int headIndex;
    private int tailIndex;
    private int numberOfElements;

    public MyArrayQueue() {
        this(DEFAULT_INITIAL_CAPACITY);
    }

    public MyArrayQueue(int capacity) {
        elements = new int[capacity];
        headIndex = 0;
        tailIndex = 0;
        numberOfElements = 0;
    }

    @Override
    public void enqueue(int element) {
        if (numberOfElements == elements.length) {
            grow();
        }
        elements[tailIndex] = element;
        tailIndex = (tailIndex + 1) % elements.length;
        numberOfElements++;
    }

    private void grow() {
        int oldCapacity = elements.length;
        int newCapacity = oldCapacity < MAX_SIZE / 2 ? oldCapacity * 2 : MAX_SIZE;
        int[] newArr = new int[newCapacity];
        for (int i = 0; i < numberOfElements; i++) {
            newArr[i] = elements[(headIndex + i) % oldCapacity];
        }
        elements = newArr;
        headIndex = 0;
        tailIndex = numberOfElements;
    }

    @Override
    public int dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        int val = elements[headIndex];
        headIndex = (headIndex + 1) % elements.length;
        numberOfElements--;
        return val;
    }

    @Override
    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        return elements[headIndex];
    }

    @Override
    public boolean isEmpty() {
        return numberOfElements == 0;
    }
}

// -----------------------------------------------

package hus.oop.midterm_2024_2025_rle_datastructure.datastructure;

import java.util.Arrays;

public class MyArrayStack implements MyStack {
    public static final int MAX_SIZE = Integer.MAX_VALUE - 8;
    private static final int DEFAULT_INITIAL_CAPACITY = 8;
    private int[] elements;
    private int numberOfElements;

    public MyArrayStack() {
        this(DEFAULT_INITIAL_CAPACITY);
    }

    public MyArrayStack(int initialCapacity) {
        elements = new int[initialCapacity];
        numberOfElements = 0;
    }

    @Override
    public void push(int value) {
        if (numberOfElements == elements.length) {
            grow();
        }
        elements[numberOfElements++] = value;
    }

    private void grow() {
        int oldCapacity = elements.length;
        int newCapacity = oldCapacity < MAX_SIZE / 2 ? oldCapacity * 2 : MAX_SIZE;
        elements = Arrays.copyOf(elements, newCapacity);
    }

    @Override
    public int pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return elements[--numberOfElements];
    }

    @Override
    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return elements[numberOfElements - 1];
    }

    @Override
    public boolean isEmpty() {
        return numberOfElements == 0;
    }
}

// -----------------------------------------------

package hus.oop.midterm_2024_2025_rle_datastructure.datastructure;

public class MyLinkedListQueue implements MyQueue {
    private Node head;
    private Node tail;

    @Override
    public void enqueue(int element) {
        Node node = new Node(element);
        if (tail != null) {
            tail.next = node;
        }
        tail = node;
        if (head == null) {
            head = node;
        }
    }

    @Override
    public int dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        int val = head.data;
        head = head.next;
        if (head == null) {
            tail = null;
        }
        return val;
    }

    @Override
    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        return head.data;
    }

    @Override
    public boolean isEmpty() {
        return head == null;
    }
}

// -----------------------------------------------

package hus.oop.midterm_2024_2025_rle_datastructure.datastructure;

public class MyLinkedListStack implements MyStack {
    private Node top;

    @Override
    public void push(int value) {
        Node node = new Node(value);
        node.next = top;
        top = node;
    }

    @Override
    public int pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        int val = top.data;
        top = top.next;
        return val;
    }

    @Override
    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return top.data;
    }

    @Override
    public boolean isEmpty() {
        return top == null;
    }
}

// -----------------------------------------------

package hus.oop.midterm_2024_2025_rle_datastructure.datastructure;

public interface MyQueue {
    void enqueue(int element);
    int dequeue();
    int peek();
    boolean isEmpty();
}

// -----------------------------------------------

package hus.oop.midterm_2024_2025_rle_datastructure.datastructure;

public interface MyStack {
    void push(int element);
    int pop();
    int peek();
    boolean isEmpty();
}

// -----------------------------------------------

package hus.oop.midterm_2024_2025_rle_datastructure.datastructure;

public class Node {
    public int data;
    public Node next;

    public Node(int data) {
        this.data = data;
    }
}

// -----------------------------------------------

package hus.oop.midterm_2024_2025_rle_datastructure.datastructure;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class TestDataStructure {
    public static void main(String[] args) {
        testArrayStack();
        testLinkedListStack();
        testArrayQueue();
        testLinkedListQueue();
    }

    public static void testArrayStack() {
        Random rand = new Random();
        int n = rand.nextInt(11) + 20;
        System.out.println("\n=== Test ArrayStack (n=" + n + ") ===");
        MyArrayStack stack = new MyArrayStack();
        List<Integer> list = new ArrayList<>();
        System.out.print("Push: ");
        for (int i = 0; i < n; i++) {
            int v = rand.nextInt(100);
            stack.push(v);
            list.add(v);
            System.out.print(v + " ");
        }
        System.out.println();
        for (int i = n; i > 0; i--) {
            int removed = stack.pop();
            list.remove(list.size() - 1);
            System.out.println("Pop " + removed + ", Remaining: " + list);
        }
    }

    public static void testLinkedListStack() {
        Random rand = new Random();
        int n = rand.nextInt(11) + 20;
        System.out.println("\n=== Test LinkedListStack (n=" + n + ") ===");
        MyLinkedListStack stack = new MyLinkedListStack();
        List<Integer> list = new ArrayList<>();
        System.out.print("Push: ");
        for (int i = 0; i < n; i++) {
            int v = rand.nextInt(100);
            stack.push(v);
            list.add(v);
            System.out.print(v + " ");
        }
        System.out.println();
        for (int i = n; i > 0; i--) {
            int removed = stack.pop();
            list.remove(list.size() - 1);
            System.out.println("Pop " + removed + ", Remaining: " + list);
        }
    }

    public static void testArrayQueue() {
        Random rand = new Random();
        int n = rand.nextInt(11) + 20;
        System.out.println("\n=== Test ArrayQueue (n=" + n + ") ===");
        MyArrayQueue queue = new MyArrayQueue();
        List<Integer> list = new ArrayList<>();
        System.out.print("Enqueue: ");
        for (int i = 0; i < n; i++) {
            int v = rand.nextInt(100);
            queue.enqueue(v);
            list.add(v);
            System.out.print(v + " ");
        }
        System.out.println();
        for (int i = n; i > 0; i--) {
            int removed = queue.dequeue();
            list.remove(0);
            System.out.println("Dequeue " + removed + ", Remaining: " + list);
        }
    }

    public static void testLinkedListQueue() {
        Random rand = new Random();
        int n = rand.nextInt(11) + 20;
        System.out.println("\n=== Test LinkedListQueue (n=" + n + ") ===");
        MyLinkedListQueue queue = new MyLinkedListQueue();
        List<Integer> list = new ArrayList<>();
        System.out.print("Enqueue: ");
        for (int i = 0; i < n; i++) {
            int v = rand.nextInt(100);
            queue.enqueue(v);
            list.add(v);
            System.out.print(v + " ");
        }
        System.out.println();
        for (int i = n; i > 0; i--) {
            int removed = queue.dequeue();
            list.remove(0);
            System.out.println("Dequeue " + removed + ", Remaining: " + list);
        }
    }
}
